pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-runner'
            yamlFile 'Infrastructure/jenkins/runner.yaml'
            defaultContainer 'builder'
        }
    }
    environment {
        DOCKER_CREDENTIALS = 'docker-cred'
        GITHUB_CREDENTIALS = 'git-cred'
        REPO_URL = 'https://github.com/noa-bl/SelaProject.git'
        GITHUB_REPO = 'noa-bl/SelaProject'
        DOCKER_IMAGE = 'noabl/flask-app'
        TEST_IMAGE = 'noabl/flask-test'
        APPLICATION_DIR = 'Application'
        VERSION = 'latest'
        GITHUB_API_URL = 'https://api.github.com'
        EMAIL_RECIPIENTS = 'noablfdev@gmail.com'
        EMAIL_CREDENTIALS = credentials('email-cred')
        HELM_EXPERIMENTAL_OCI = '1' // Enable OCI support for Helm
        CHART_PATH = 'Infrastructure/app'
        CHART_NAME = 'posts-app-chart'
        CHART_VERSION = '0.1.2'
    }
    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/feature'], [name: '*/main']], //change later
                    userRemoteConfigs: [[
                        url: "${REPO_URL}",
                        credentialsId: GITHUB_CREDENTIALS
                    ]]
                ])
            }
        }
        stage('Install Helm') {
            steps {
                script {
                    // Check if Helm is installed
                    def helmInstalled = sh(script: 'which helm', returnStatus: true) == 0

                    // Install Helm if not installed
                    if (!helmInstalled) {
                        sh '''
                        wget https://get.helm.sh/helm-v3.6.1-linux-amd64.tar.gz
                        tar -xzvf helm-v3.6.1-linux-amd64.tar.gz
                        sudo cp linux-amd64/helm /usr/bin/
                        helm version
                        '''
                    } else {
                        echo 'Helm is already installed'
                        sh 'helm version'
                    }
                }
            }
        }
        stage('Build and Push Image for app- with temp tag') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:temp", "-f ${APPLICATION_DIR}/dockerfile ${APPLICATION_DIR}")
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS) {
                        docker.image("${DOCKER_IMAGE}:temp").push()
                    }
                }
            }
        }
        
        stage('Run Tests with Docker Compose') {
            steps {
                script {
                    sh "docker-compose -f ${APPLICATION_DIR}/docker-compose.yaml up --build --abort-on-container-exit"
                }
            }
        }
        stage('Generate Redeploy Hash') {
            steps {
                script {
                    // Generate a new redeploy-hash using Unix timestamp
                    def redeployHash = sh(script: 'date +%s', returnStdout: true).trim()
                    // Update the values.yaml file with the new redeploy-hash
                    sh """
                    sed -i 's/redeploy-hash:.*/redeploy-hash: "${redeployHash}"/' ${WORKSPACE}/${CHART_PATH}/values.yaml
                    """
                    // Render the Helm template and output to logs
                    sh "helm template ${WORKSPACE}/${CHART_PATH}"
                }
            }
        }
        stage('Build Helm Package  when in main') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh "helm package ${WORKSPACE}/${CHART_PATH} --version ${CHART_VERSION} --destination ${WORKSPACE}"
                }
            }
        }
        stage('Create Merge Request') {
            when {
                not {
                    branch 'main'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'git-cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        def branchName = env.BRANCH_NAME
                        def pullRequestTitle = "Merge ${branchName} into main"
                        def pullRequestBody = "Merge request from Jenkins pipeline - branch ${branchName}"

                        sh """
                        set -x
                        curl -X POST -u ${USERNAME}:${PASSWORD} \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{ "title": "${pullRequestTitle}", "body": "${pullRequestBody}", "head": "${branchName}", "base": "main" }' \
                        ${GITHUB_API_URL}/repos/${GITHUB_REPO}/pulls
                        set +x
                        """
                    }
                }
            }
        }
        stage('Push Final Image to DockerHub') { 
            when {
                allOf {
                    branch 'main'
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                }
            }
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:latest", "-f ${APPLICATION_DIR}/dockerfile ${APPLICATION_DIR}")
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS) {
                        docker.image("${DOCKER_IMAGE}:latest").push()
                    }
                }
            }
        }
         stage('Push Helm Package to DockerHub') {
            when {
                branch 'main'
            }
             steps {
            script {
            withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                sh """
                export HELM_EXPERIMENTAL_OCI=1
                echo \$DOCKER_PASSWORD | helm registry login docker.io -u noabl --password-stdin
                helm push ${WORKSPACE}/${CHART_NAME}-${CHART_VERSION}.tgz oci://docker.io/noabl
                """
                }
                }
            }
        }
        

    }
    post {
        failure {
            script {
                emailext subject: "Build Failure - automated notification",
                    body: "An error occurred, please check the latest console output",
                    replyTo: 'noablfdev@gmail.com',
                    mimeType: 'text/plain',
                    to: 'noablfdev@gmail.com'
            }
        }
    }
}